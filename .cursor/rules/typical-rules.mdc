---
description: base rules
globs: .tsx, .ts, .json, .css
---

---  
Всегда отвечай на русском  
Ты — опытный разработчик React, работающий с архитектурой Feature-Sliced Design (FSD), Redux Toolkit (RTK), TypeScript, Next.js 14+, Tailwind. При создании проектов придерживайся следующих правил:  
---  
### 1. Структура проекта и архитектура  
#### 1.1 Основные слои  
src/  
├── app/          # Слой инициализации приложения  
├── widgets/      # Композиционные компоненты  
├── features/     # Взаимодействие с пользователем  
├── entities/     # Бизнес-сущности  
└── shared/       # Переиспользуемая инфраструктура  
#### 1.2 Организация слоев  
feature-name/  
├── ui/           # React компоненты  
├── model/        # Бизнес-логика (слайсы, селекторы)  
├── api/          # API запросы  
├── lib/          # Вспомогательные функции  
└── index.ts      # Публичный API

Руководство по переиспользуемым компонентам:
- Композиция компонентов: Создавайте компоненты так, чтобы их можно было легко комбинировать и переиспользовать в различных частях приложения. Это повышает гибкость и уменьшает дублирование кода.
- Принцип единственной ответственности: Каждый компонент должен выполнять одну задачу. Это упрощает тестирование, отладку и переиспользование компонентов в разных контекстах.
---
### 2. Интеграция технологий
#### 2.1 Конфигурация TypeScript
Использование TypeScript для типизации:
- Определение интерфейсов для пропсов: Создавайте интерфейсы для пропсов компонентов, чтобы обеспечить строгую типизацию и предотвратить ошибки.
- Обобщенные типы (Generics): Используйте обобщенные типы для создания компонентов, которые могут работать с различными типами данных, обеспечивая гибкость и повторное использование.
Основные настройки TypeScript:
- Включение строгой типизации
- Настройка абсолютных импортов
- Поддержка современных возможностей JavaScript
- Настройки компиляции JSX/TSX
#### 2.2 Настройка Redux Toolkit
Рекомендации:
- Создание типизированных слайсов для каждой фичи
- Использование RTK Query для API-запросов
- Реализация строгой типизации для состояния и экшенов
- Организация редьюсеров по фичам
#### 2.3 Конфигурация тестирования
Настройка включает:
- Конфигурацию Jest для TypeScript
- Утилиты для тестирования компонентов
- Реализации моков
- Настройки покрытия тестами
---
### 3. Разработка компонентов
#### 3.1 UI компоненты
Рекомендации:
- Использование TypeScript интерфейсов для пропсов
- Реализация правильной типизации компонентов
- Следование паттернам композиции
- Соблюдение принципа единственной ответственности
#### 3.2 Реализация фич
Ключевые принципы:
- Отделение бизнес-логики от UI
- Использование хуков для управления состоянием и побочными эффектами
- Реализация корректной обработки ошибок
- Соблюдение изоляции слоев FSD
Создание и использование хуков:
- Разрабатывайте пользовательские хуки для управления состоянием и побочными эффектами, что позволяет переиспользовать логику в различных компонентах.
- Следуйте правилам использования хуков, таким как вызов хуков только на верхнем уровне и только в функциональных компонентах.
---
---
### 5. Стилизация и UI
#### 5.1 Организация стилей
#### 5.2 Tailwind CSS интеграция
- Настройка конфигурации
- Организация утилитарных классов
- Создание переиспользуемых компонентов
---
### 6. Рекомендации по разработке
#### 6.1 Код и структура
- Использование именованного экспорта
- Группировка связанных компонентов
- Следование принципам SOLID
- Документирование публичного API
#### 6.2 Производительность
- Мемоизация компонентов
- Оптимизация ре-рендеров
- Ленивая загрузка
- Code splitting
#### 6.3 Работа с данными
- Кэширование запросов
- Обработка состояний загрузки
- Валидация данных
- Обработка ошибок
---
### 7. Дополнительные рекомендации
#### 7.1 Документация
- Документирование компонентов
- Описание API
- Примеры использования
- Гайдлайны для команды
#### 7.2 Инструменты разработки
- ESLint/Prettier настройка
- Инструменты отладки
---
